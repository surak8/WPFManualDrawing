//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

// https://social.msdn.microsoft.com/Forums/en-US/94ddd25e-7093-4986-b8c8-b647924251f6/manual-rendering-of-a-wpf-user-control?forum=wpf

namespace NSTest {

    public partial class MainWindow : Window {
        #region constants
        const string DATA_FORMAT = "myFormat";
        #endregion constants

        #region fields
        Point startPoint;
        MainWindowViewModel _vm;
        #endregion

        #region ctor
        public MainWindow() {
            this.DataContext = (_vm = new MainWindowViewModel());
            InitializeComponent();
        }
        #endregion

        bool mouseMoving;
        void dgRequests_PreviewMouseLeftButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e) {
            // Store the mouse position
            startPoint = e.GetPosition(null);
            this.mouseMoving = true;
        }

        void dgRequests_PreviewMouseMove(object sender, System.Windows.Input.MouseEventArgs e) {
            if (!mouseMoving)
                return;
            // Get the current mouse position
            Point mousePos = e.GetPosition(null);
            Vector diff = startPoint - mousePos;

            if (e.LeftButton == MouseButtonState.Pressed &&
                Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance ||
                Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance) {
#if true
                DataGrid dg = sender as DataGrid;
                ToolRoomRequest contact = dg.SelectedItem as ToolRoomRequest;
                DataObject dragData = new DataObject(DATA_FORMAT, contact);
                Logger.log(MethodBase.GetCurrentMethod(), "begin drag");
                DragDrop.DoDragDrop(sender as DependencyObject, dragData, DragDropEffects.Move);
                Logger.log(MethodBase.GetCurrentMethod(), "end drag");
#else
                // Get the dragged ListViewItem
                ListView listView = sender as ListView;
                ListViewItem listViewItem =
                    FindAnchestor<ListViewItem>((DependencyObject) e.OriginalSource);

                // Find the data behind the ListViewItem
                Contact contact = (Contact) listView.ItemContainerGenerator.
                    ItemFromContainer(listViewItem);

                // Initialize the drag & drop operation
                DataObject dragData = new DataObject(DATA_FORMAT, contact);
                DragDrop.DoDragDrop(listViewItem, dragData, DragDropEffects.Move);
#endif
            }

        }
        // Helper to search up the VisualTree
        static T FindAnchestor<T>(DependencyObject current)
          where T : DependencyObject {
            do {
                if (current is T) {
                    return (T) current;
                }
                current = VisualTreeHelper.GetParent(current);
            }
            while (current != null);
            return null;
        }

        void ccvRequests_DragEnter(object sender, DragEventArgs e) {
            lastDropped = null;
            if (!e.Data.GetDataPresent(DATA_FORMAT) || sender == e.Source)
                e.Effects = DragDropEffects.None;
        }

        ToolRoomRequest lastDropped = null;

        void ccvRequests_Drop(object sender, DragEventArgs e) {
            ToolRoomRequest trr;

            if (e.Data.GetDataPresent(DATA_FORMAT)) {
                trr = e.Data.GetData(DATA_FORMAT) as ToolRoomRequest;
                lastDropped = trr;
                //     dgRequests.ItemsSource .Remove(trr);
                //        dgRequests.Items.Refresh();
                Logger.log(MethodBase.GetCurrentMethod(), "dropped");

            }
        }

        void dgRequests_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e) {
            mouseMoving = false;
        }

        void dgRequests_MouseLeftButtonUp(object sender, MouseButtonEventArgs e) {
            if (lastDropped != null) {
                Logger.log(MethodBase.GetCurrentMethod(), "do something");
                //                dgRequests.ItemsSource.`
            }
        }

        void ccvRequests_MouseLeftButtonUp(object sender, MouseButtonEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod());
        }

        void ccvRequests_PreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod());
        }

        void ccvRequests_GiveFeedback(object sender, GiveFeedbackEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod());

        }

        void dgRequests_GiveFeedback(object sender, GiveFeedbackEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod());

        }

          void btnTest_Click(object sender, RoutedEventArgs e) {
            new ToolmakerWindow().ShowDialog();
        }
    }
}